# Makefile for CoCoALib/src/server directory

COCOA_ROOT=../..
include $(COCOA_ROOT)/configuration/autoconf.mk
CWD=src/server/

DEPEND_FILE=Makefile_dependencies

SRCS=CoCoA5io.C \
     GlobalIO.C  SocketStream.C  \
     RegisterServerOps.C  RegisterServerOpsUser.C  RegisterServerOpsFrobby.C  \
     ServerOp.C  CoCoAServer.C

OBJS=$(SRCS:.C=.o)

EXECS=CoCoAServer

.PHONY: default
default: CoCoAServer


# This target assumes that the CoCoA library has already been compiled.
# Normally this target is used only as part of "make" from the
# CoCoALib root directory.
all: CoCoAServer
	touch all

CoCoAServer: $(OBJS) $(COCOA_LIB)
	$(COMPILE) $(OBJS) -o CoCoAServer $(LDLIBS)  # just LINKS the object files


.PHONY: benchmarks
benchmarks:
	@(cd benchmarks; $(MAKE) benchmarks)


.PHONY: clean clean-local
clean: clean-local
	@echo "Cleaned CoCoALib/$(CWD)"

clean-local:
	@/bin/rm -f core a.out all  ./*~  ./.*~  ./.\#*
	@/bin/rm -f  $(EXECS)  $(OBJS)  "$(DEPEND_FILE).old"  "$(DEPEND_FILE).new"
	@/bin/rm -rf  ./*.dSYM

.PHONY: veryclean veryclean-local
veryclean: clean-local
	@true >| "$(DEPEND_FILE)" # Empties $(DEPEND_FILE)
	@echo "Verycleaned CoCoALib/$(CWD)"


# This target checks whether we should really build DEPEND_FILE
.PHONY: dependencies
dependencies:
	@if [ \! -s "$(DEPEND_FILE)" -o \! "$(DEPEND_FILE)" -nt "$(COCOA_HDR)" ] ; \
	then \
	  $(MAKE) create-dependencies; \
	fi

# This is the target which really does rebuild the DEPEND_FILE
.PHONY: create-dependencies
create-dependencies:
	@/bin/rm -rf $(DEPEND_FILE).new
	@echo "Rebuilding dependencies in <CoCoALib>/$(CWD)"
	@echo "##################################################################"   >> $(DEPEND_FILE).new
	@echo "#       ---  CoCoAServer with CoCoALib-$(COCOALIB_VERSION)  ---"      >> $(DEPEND_FILE).new
	@echo "# Dependencies for directory $(CWD)"                                  >> $(DEPEND_FILE).new
	@echo "# DO NOT EDIT: this file is automatically generated; to regenerate"   >> $(DEPEND_FILE).new
	@echo "# run \`make dependencies' in the CoCoALib root directory."           >> $(DEPEND_FILE).new
	@echo "##################################################################"   >> $(DEPEND_FILE).new
	@echo                                                                        >> $(DEPEND_FILE).new
	@for srcfile in $(SRCS); \
	do \
	  objfile=`basename $$srcfile .C`.o; \
	  $(CXX) $(CXXFLAGS) $(CXXFLAGS_DEFINES) $(INCLUDE_PATHS)  -MM "$$srcfile" -MQ "$$objfile" >> $(DEPEND_FILE).new; \
	  echo >> $(DEPEND_FILE).new; \
	done
	@if [ -s "$(DEPEND_FILE)" ] ; \
	then \
	  /bin/mv -f "$(DEPEND_FILE)" "$(DEPEND_FILE).old" ; \
	fi
	@/bin/mv $(DEPEND_FILE).new  $(DEPEND_FILE)


$(OBJS): $(COCOA_ROOT)/configuration/autoconf.mk

$(DEPEND_FILE):
	@touch "$(DEPEND_FILE)"

include $(DEPEND_FILE)

#############################################################################
